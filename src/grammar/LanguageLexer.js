// Generated from ./grammar/Language.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,26,191,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
1,2,3,2,76,8,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,
10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,3,16,119,8,16,
1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
17,1,17,1,17,3,17,138,8,17,1,18,1,18,5,18,142,8,18,10,18,12,18,145,9,18,
1,18,1,18,1,19,1,19,3,19,151,8,19,1,19,1,19,1,20,4,20,156,8,20,11,20,12,
20,157,1,21,4,21,161,8,21,11,21,12,21,162,1,21,1,21,4,21,167,8,21,11,21,
12,21,168,1,22,1,22,3,22,173,8,22,1,23,3,23,176,8,23,1,23,1,23,1,24,4,24,
181,8,24,11,24,12,24,182,1,25,4,25,186,8,25,11,25,12,25,187,1,25,1,25,1,
143,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
51,26,1,0,6,2,0,60,60,62,62,3,0,32,32,65,90,97,122,1,0,48,57,1,0,46,46,4,
0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,208,0,1,1,0,0,0,0,3,1,0,
0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,3,55,1,0,0,0,5,75,1,0,0,0,7,77,1,0,0,0,
9,79,1,0,0,0,11,81,1,0,0,0,13,83,1,0,0,0,15,85,1,0,0,0,17,87,1,0,0,0,19,
89,1,0,0,0,21,91,1,0,0,0,23,93,1,0,0,0,25,97,1,0,0,0,27,99,1,0,0,0,29,102,
1,0,0,0,31,107,1,0,0,0,33,118,1,0,0,0,35,137,1,0,0,0,37,139,1,0,0,0,39,148,
1,0,0,0,41,155,1,0,0,0,43,160,1,0,0,0,45,170,1,0,0,0,47,175,1,0,0,0,49,180,
1,0,0,0,51,185,1,0,0,0,53,54,5,10,0,0,54,2,1,0,0,0,55,56,5,115,0,0,56,57,
5,116,0,0,57,58,5,97,0,0,58,59,5,114,0,0,59,60,5,116,0,0,60,61,5,32,0,0,
61,62,5,45,0,0,62,63,5,45,0,0,63,64,5,62,0,0,64,4,1,0,0,0,65,66,5,101,0,
0,66,67,5,110,0,0,67,76,5,116,0,0,68,69,5,112,0,0,69,70,5,100,0,0,70,71,
5,101,0,0,71,76,5,99,0,0,72,73,5,99,0,0,73,74,5,116,0,0,74,76,5,114,0,0,
75,65,1,0,0,0,75,68,1,0,0,0,75,72,1,0,0,0,76,6,1,0,0,0,77,78,5,40,0,0,78,
8,1,0,0,0,79,80,5,41,0,0,80,10,1,0,0,0,81,82,5,123,0,0,82,12,1,0,0,0,83,
84,5,125,0,0,84,14,1,0,0,0,85,86,5,61,0,0,86,16,1,0,0,0,87,88,5,43,0,0,88,
18,1,0,0,0,89,90,5,45,0,0,90,20,1,0,0,0,91,92,5,42,0,0,92,22,1,0,0,0,93,
94,5,112,0,0,94,95,5,116,0,0,95,96,5,114,0,0,96,24,1,0,0,0,97,98,5,47,0,
0,98,26,1,0,0,0,99,100,5,105,0,0,100,101,5,102,0,0,101,28,1,0,0,0,102,103,
5,101,0,0,103,104,5,108,0,0,104,105,5,115,0,0,105,106,5,101,0,0,106,30,1,
0,0,0,107,108,5,119,0,0,108,109,5,104,0,0,109,110,5,105,0,0,110,111,5,108,
0,0,111,112,5,101,0,0,112,32,1,0,0,0,113,119,7,0,0,0,114,115,5,60,0,0,115,
119,5,61,0,0,116,117,5,62,0,0,117,119,5,61,0,0,118,113,1,0,0,0,118,114,1,
0,0,0,118,116,1,0,0,0,119,34,1,0,0,0,120,121,5,124,0,0,121,138,5,124,0,0,
122,123,5,38,0,0,123,138,5,38,0,0,124,125,5,61,0,0,125,138,5,61,0,0,126,
127,5,33,0,0,127,138,5,61,0,0,128,129,5,116,0,0,129,130,5,114,0,0,130,131,
5,117,0,0,131,138,5,101,0,0,132,133,5,102,0,0,133,134,5,97,0,0,134,135,5,
108,0,0,135,136,5,115,0,0,136,138,5,101,0,0,137,120,1,0,0,0,137,122,1,0,
0,0,137,124,1,0,0,0,137,126,1,0,0,0,137,128,1,0,0,0,137,132,1,0,0,0,138,
36,1,0,0,0,139,143,5,34,0,0,140,142,9,0,0,0,141,140,1,0,0,0,142,145,1,0,
0,0,143,144,1,0,0,0,143,141,1,0,0,0,144,146,1,0,0,0,145,143,1,0,0,0,146,
147,5,34,0,0,147,38,1,0,0,0,148,150,5,34,0,0,149,151,7,1,0,0,150,149,1,0,
0,0,150,151,1,0,0,0,151,152,1,0,0,0,152,153,5,34,0,0,153,40,1,0,0,0,154,
156,7,2,0,0,155,154,1,0,0,0,156,157,1,0,0,0,157,155,1,0,0,0,157,158,1,0,
0,0,158,42,1,0,0,0,159,161,7,2,0,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,
1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,166,7,3,0,0,165,167,7,2,0,0,
166,165,1,0,0,0,167,168,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,44,1,
0,0,0,170,172,5,33,0,0,171,173,5,10,0,0,172,171,1,0,0,0,172,173,1,0,0,0,
173,46,1,0,0,0,174,176,5,13,0,0,175,174,1,0,0,0,175,176,1,0,0,0,176,177,
1,0,0,0,177,178,5,10,0,0,178,48,1,0,0,0,179,181,7,4,0,0,180,179,1,0,0,0,
181,182,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,50,1,0,0,0,184,186,7,
5,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,
189,1,0,0,0,189,190,6,25,0,0,190,52,1,0,0,0,13,0,75,118,137,143,150,157,
162,168,172,175,182,187,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class LanguageLexer extends antlr4.Lexer {

    static grammarFileName = "Language.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'\\n'", "'start -->'", null, "'('", "')'", 
                         "'{'", "'}'", "'='", "'+'", "'-'", "'*'", "'ptr'", 
                         "'/'", "'if'", "'else'", "'while'" ];
	static symbolicNames = [ null, null, "MAIN", "TYPE", "OPEN_PARENTH", "CLOSE_PARENTH", 
                          "OPEN_CURL", "CLOSE_CURL", "EQUALS", "PLUS", "MINUS", 
                          "MULT", "PRINT", "DIV", "IF_PR", "ELSE_PR", "WHILE_PR", 
                          "COND_MAT", "COND_LOG", "STRING", "CHAR", "INT", 
                          "FLOAT", "SEMI", "NEWLINE", "ID", "WS" ];
	static ruleNames = [ "T__0", "MAIN", "TYPE", "OPEN_PARENTH", "CLOSE_PARENTH", 
                      "OPEN_CURL", "CLOSE_CURL", "EQUALS", "PLUS", "MINUS", 
                      "MULT", "PRINT", "DIV", "IF_PR", "ELSE_PR", "WHILE_PR", 
                      "COND_MAT", "COND_LOG", "STRING", "CHAR", "INT", "FLOAT", 
                      "SEMI", "NEWLINE", "ID", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

LanguageLexer.EOF = antlr4.Token.EOF;
LanguageLexer.T__0 = 1;
LanguageLexer.MAIN = 2;
LanguageLexer.TYPE = 3;
LanguageLexer.OPEN_PARENTH = 4;
LanguageLexer.CLOSE_PARENTH = 5;
LanguageLexer.OPEN_CURL = 6;
LanguageLexer.CLOSE_CURL = 7;
LanguageLexer.EQUALS = 8;
LanguageLexer.PLUS = 9;
LanguageLexer.MINUS = 10;
LanguageLexer.MULT = 11;
LanguageLexer.PRINT = 12;
LanguageLexer.DIV = 13;
LanguageLexer.IF_PR = 14;
LanguageLexer.ELSE_PR = 15;
LanguageLexer.WHILE_PR = 16;
LanguageLexer.COND_MAT = 17;
LanguageLexer.COND_LOG = 18;
LanguageLexer.STRING = 19;
LanguageLexer.CHAR = 20;
LanguageLexer.INT = 21;
LanguageLexer.FLOAT = 22;
LanguageLexer.SEMI = 23;
LanguageLexer.NEWLINE = 24;
LanguageLexer.ID = 25;
LanguageLexer.WS = 26;



