// Generated from ./grammar/Language.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,31,228,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
2,90,8,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,120,
8,12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,
17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,
1,20,1,21,1,21,1,21,1,21,1,21,3,21,156,8,21,1,22,1,22,1,22,1,22,1,22,1,22,
1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,175,8,22,1,23,
1,23,5,23,179,8,23,10,23,12,23,182,9,23,1,23,1,23,1,24,1,24,3,24,188,8,24,
1,24,1,24,1,25,4,25,193,8,25,11,25,12,25,194,1,26,4,26,198,8,26,11,26,12,
26,199,1,26,1,26,4,26,204,8,26,11,26,12,26,205,1,27,1,27,3,27,210,8,27,1,
28,3,28,213,8,28,1,28,1,28,1,29,4,29,218,8,29,11,29,12,29,219,1,30,4,30,
223,8,30,11,30,12,30,224,1,30,1,30,1,180,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,
7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
1,0,6,2,0,60,60,62,62,3,0,32,32,65,90,97,122,1,0,48,57,1,0,46,46,4,0,48,
57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,250,0,1,1,0,0,0,0,3,1,0,0,0,0,
5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
1,0,0,0,1,63,1,0,0,0,3,65,1,0,0,0,5,89,1,0,0,0,7,91,1,0,0,0,9,93,1,0,0,0,
11,95,1,0,0,0,13,97,1,0,0,0,15,99,1,0,0,0,17,101,1,0,0,0,19,103,1,0,0,0,
21,105,1,0,0,0,23,107,1,0,0,0,25,119,1,0,0,0,27,121,1,0,0,0,29,123,1,0,0,
0,31,127,1,0,0,0,33,129,1,0,0,0,35,132,1,0,0,0,37,137,1,0,0,0,39,143,1,0,
0,0,41,147,1,0,0,0,43,155,1,0,0,0,45,174,1,0,0,0,47,176,1,0,0,0,49,185,1,
0,0,0,51,192,1,0,0,0,53,197,1,0,0,0,55,207,1,0,0,0,57,212,1,0,0,0,59,217,
1,0,0,0,61,222,1,0,0,0,63,64,5,10,0,0,64,2,1,0,0,0,65,66,5,115,0,0,66,67,
5,116,0,0,67,68,5,97,0,0,68,69,5,114,0,0,69,70,5,116,0,0,70,71,5,32,0,0,
71,72,5,45,0,0,72,73,5,45,0,0,73,74,5,62,0,0,74,4,1,0,0,0,75,76,5,101,0,
0,76,77,5,110,0,0,77,90,5,116,0,0,78,79,5,112,0,0,79,80,5,100,0,0,80,81,
5,101,0,0,81,90,5,99,0,0,82,83,5,99,0,0,83,84,5,116,0,0,84,90,5,114,0,0,
85,86,5,98,0,0,86,87,5,111,0,0,87,88,5,111,0,0,88,90,5,108,0,0,89,75,1,0,
0,0,89,78,1,0,0,0,89,82,1,0,0,0,89,85,1,0,0,0,90,6,1,0,0,0,91,92,5,40,0,
0,92,8,1,0,0,0,93,94,5,41,0,0,94,10,1,0,0,0,95,96,5,123,0,0,96,12,1,0,0,
0,97,98,5,125,0,0,98,14,1,0,0,0,99,100,5,43,0,0,100,16,1,0,0,0,101,102,5,
45,0,0,102,18,1,0,0,0,103,104,5,42,0,0,104,20,1,0,0,0,105,106,5,37,0,0,106,
22,1,0,0,0,107,108,5,61,0,0,108,24,1,0,0,0,109,110,5,43,0,0,110,120,5,61,
0,0,111,112,5,45,0,0,112,120,5,61,0,0,113,114,5,42,0,0,114,120,5,61,0,0,
115,116,5,47,0,0,116,120,5,61,0,0,117,118,5,37,0,0,118,120,5,61,0,0,119,
109,1,0,0,0,119,111,1,0,0,0,119,113,1,0,0,0,119,115,1,0,0,0,119,117,1,0,
0,0,120,26,1,0,0,0,121,122,5,44,0,0,122,28,1,0,0,0,123,124,5,112,0,0,124,
125,5,116,0,0,125,126,5,114,0,0,126,30,1,0,0,0,127,128,5,47,0,0,128,32,1,
0,0,0,129,130,5,105,0,0,130,131,5,102,0,0,131,34,1,0,0,0,132,133,5,101,0,
0,133,134,5,108,0,0,134,135,5,115,0,0,135,136,5,101,0,0,136,36,1,0,0,0,137,
138,5,119,0,0,138,139,5,104,0,0,139,140,5,105,0,0,140,141,5,108,0,0,141,
142,5,101,0,0,142,38,1,0,0,0,143,144,5,102,0,0,144,145,5,111,0,0,145,146,
5,114,0,0,146,40,1,0,0,0,147,148,5,100,0,0,148,149,5,111,0,0,149,42,1,0,
0,0,150,156,7,0,0,0,151,152,5,60,0,0,152,156,5,61,0,0,153,154,5,62,0,0,154,
156,5,61,0,0,155,150,1,0,0,0,155,151,1,0,0,0,155,153,1,0,0,0,156,44,1,0,
0,0,157,158,5,124,0,0,158,175,5,124,0,0,159,160,5,38,0,0,160,175,5,38,0,
0,161,162,5,61,0,0,162,175,5,61,0,0,163,164,5,33,0,0,164,175,5,61,0,0,165,
166,5,116,0,0,166,167,5,114,0,0,167,168,5,117,0,0,168,175,5,101,0,0,169,
170,5,102,0,0,170,171,5,97,0,0,171,172,5,108,0,0,172,173,5,115,0,0,173,175,
5,101,0,0,174,157,1,0,0,0,174,159,1,0,0,0,174,161,1,0,0,0,174,163,1,0,0,
0,174,165,1,0,0,0,174,169,1,0,0,0,175,46,1,0,0,0,176,180,5,34,0,0,177,179,
9,0,0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,181,1,0,0,0,180,178,1,0,0,0,
181,183,1,0,0,0,182,180,1,0,0,0,183,184,5,34,0,0,184,48,1,0,0,0,185,187,
5,34,0,0,186,188,7,1,0,0,187,186,1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,
189,190,5,34,0,0,190,50,1,0,0,0,191,193,7,2,0,0,192,191,1,0,0,0,193,194,
1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,52,1,0,0,0,196,198,7,2,0,0,197,
196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,201,1,0,
0,0,201,203,7,3,0,0,202,204,7,2,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,
203,1,0,0,0,205,206,1,0,0,0,206,54,1,0,0,0,207,209,5,33,0,0,208,210,5,10,
0,0,209,208,1,0,0,0,209,210,1,0,0,0,210,56,1,0,0,0,211,213,5,13,0,0,212,
211,1,0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,215,5,10,0,0,215,58,1,0,
0,0,216,218,7,4,0,0,217,216,1,0,0,0,218,219,1,0,0,0,219,217,1,0,0,0,219,
220,1,0,0,0,220,60,1,0,0,0,221,223,7,5,0,0,222,221,1,0,0,0,223,224,1,0,0,
0,224,222,1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,227,6,30,0,0,227,62,
1,0,0,0,14,0,89,119,155,174,180,187,194,199,205,209,212,219,224,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class LanguageLexer extends antlr4.Lexer {

    static grammarFileName = "Language.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'\\n'", "'start -->'", null, "'('", "')'", 
                         "'{'", "'}'", "'+'", "'-'", "'*'", "'%'", "'='", 
                         null, "','", "'ptr'", "'/'", "'if'", "'else'", 
                         "'while'", "'for'", "'do'" ];
	static symbolicNames = [ null, null, "MAIN", "TYPE", "OPEN_PARENTH", "CLOSE_PARENTH", 
                          "OPEN_CURL", "CLOSE_CURL", "PLUS", "SUB", "MULT", 
                          "MOD", "EQUALS", "MATH_EQUALS", "COMMA", "PRINT", 
                          "DIV", "IF_PR", "ELSE_PR", "WHILE_PR", "FOR_PR", 
                          "DO_PR", "COND_MAT", "COND_LOG", "STRING", "CHAR", 
                          "INT", "FLOAT", "SEMI", "NEWLINE", "ID", "WS" ];
	static ruleNames = [ "T__0", "MAIN", "TYPE", "OPEN_PARENTH", "CLOSE_PARENTH", 
                      "OPEN_CURL", "CLOSE_CURL", "PLUS", "SUB", "MULT", 
                      "MOD", "EQUALS", "MATH_EQUALS", "COMMA", "PRINT", 
                      "DIV", "IF_PR", "ELSE_PR", "WHILE_PR", "FOR_PR", "DO_PR", 
                      "COND_MAT", "COND_LOG", "STRING", "CHAR", "INT", "FLOAT", 
                      "SEMI", "NEWLINE", "ID", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

LanguageLexer.EOF = antlr4.Token.EOF;
LanguageLexer.T__0 = 1;
LanguageLexer.MAIN = 2;
LanguageLexer.TYPE = 3;
LanguageLexer.OPEN_PARENTH = 4;
LanguageLexer.CLOSE_PARENTH = 5;
LanguageLexer.OPEN_CURL = 6;
LanguageLexer.CLOSE_CURL = 7;
LanguageLexer.PLUS = 8;
LanguageLexer.SUB = 9;
LanguageLexer.MULT = 10;
LanguageLexer.MOD = 11;
LanguageLexer.EQUALS = 12;
LanguageLexer.MATH_EQUALS = 13;
LanguageLexer.COMMA = 14;
LanguageLexer.PRINT = 15;
LanguageLexer.DIV = 16;
LanguageLexer.IF_PR = 17;
LanguageLexer.ELSE_PR = 18;
LanguageLexer.WHILE_PR = 19;
LanguageLexer.FOR_PR = 20;
LanguageLexer.DO_PR = 21;
LanguageLexer.COND_MAT = 22;
LanguageLexer.COND_LOG = 23;
LanguageLexer.STRING = 24;
LanguageLexer.CHAR = 25;
LanguageLexer.INT = 26;
LanguageLexer.FLOAT = 27;
LanguageLexer.SEMI = 28;
LanguageLexer.NEWLINE = 29;
LanguageLexer.ID = 30;
LanguageLexer.WS = 31;



