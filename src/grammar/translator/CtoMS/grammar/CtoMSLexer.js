// Generated from ./grammar/CtoMS.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,29,213,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,3,1,74,8,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
1,7,1,7,1,7,1,7,1,7,3,7,96,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,
17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,3,19,134,
8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,3,20,153,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,
23,1,24,4,24,179,8,24,11,24,12,24,180,1,25,4,25,184,8,25,11,25,12,25,185,
1,25,1,25,4,25,190,8,25,11,25,12,25,191,1,26,1,26,4,26,196,8,26,11,26,12,
26,197,1,26,1,26,1,27,4,27,203,8,27,11,27,12,27,204,1,28,4,28,208,8,28,11,
28,12,28,209,1,28,1,28,1,197,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,1,0,6,2,0,60,60,62,62,3,
0,32,32,65,90,97,122,1,0,48,57,1,0,46,46,4,0,48,57,65,90,95,95,97,122,3,
0,9,10,13,13,32,32,231,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,73,1,0,0,0,5,75,1,0,0,0,7,
77,1,0,0,0,9,79,1,0,0,0,11,81,1,0,0,0,13,83,1,0,0,0,15,95,1,0,0,0,17,97,
1,0,0,0,19,99,1,0,0,0,21,101,1,0,0,0,23,103,1,0,0,0,25,105,1,0,0,0,27,107,
1,0,0,0,29,109,1,0,0,0,31,111,1,0,0,0,33,114,1,0,0,0,35,119,1,0,0,0,37,125,
1,0,0,0,39,133,1,0,0,0,41,152,1,0,0,0,43,154,1,0,0,0,45,161,1,0,0,0,47,173,
1,0,0,0,49,178,1,0,0,0,51,183,1,0,0,0,53,193,1,0,0,0,55,202,1,0,0,0,57,207,
1,0,0,0,59,60,5,10,0,0,60,2,1,0,0,0,61,62,5,105,0,0,62,63,5,110,0,0,63,74,
5,116,0,0,64,65,5,102,0,0,65,66,5,108,0,0,66,67,5,111,0,0,67,68,5,97,0,0,
68,74,5,116,0,0,69,70,5,99,0,0,70,71,5,104,0,0,71,72,5,97,0,0,72,74,5,114,
0,0,73,61,1,0,0,0,73,64,1,0,0,0,73,69,1,0,0,0,74,4,1,0,0,0,75,76,5,40,0,
0,76,6,1,0,0,0,77,78,5,41,0,0,78,8,1,0,0,0,79,80,5,123,0,0,80,10,1,0,0,0,
81,82,5,125,0,0,82,12,1,0,0,0,83,84,5,61,0,0,84,14,1,0,0,0,85,86,5,43,0,
0,86,96,5,61,0,0,87,88,5,45,0,0,88,96,5,61,0,0,89,90,5,42,0,0,90,96,5,61,
0,0,91,92,5,47,0,0,92,96,5,61,0,0,93,94,5,37,0,0,94,96,5,61,0,0,95,85,1,
0,0,0,95,87,1,0,0,0,95,89,1,0,0,0,95,91,1,0,0,0,95,93,1,0,0,0,96,16,1,0,
0,0,97,98,5,43,0,0,98,18,1,0,0,0,99,100,5,45,0,0,100,20,1,0,0,0,101,102,
5,42,0,0,102,22,1,0,0,0,103,104,5,47,0,0,104,24,1,0,0,0,105,106,5,37,0,0,
106,26,1,0,0,0,107,108,5,34,0,0,108,28,1,0,0,0,109,110,5,59,0,0,110,30,1,
0,0,0,111,112,5,105,0,0,112,113,5,102,0,0,113,32,1,0,0,0,114,115,5,101,0,
0,115,116,5,108,0,0,116,117,5,115,0,0,117,118,5,101,0,0,118,34,1,0,0,0,119,
120,5,119,0,0,120,121,5,104,0,0,121,122,5,105,0,0,122,123,5,108,0,0,123,
124,5,101,0,0,124,36,1,0,0,0,125,126,5,100,0,0,126,127,5,111,0,0,127,38,
1,0,0,0,128,134,7,0,0,0,129,130,5,60,0,0,130,134,5,61,0,0,131,132,5,62,0,
0,132,134,5,61,0,0,133,128,1,0,0,0,133,129,1,0,0,0,133,131,1,0,0,0,134,40,
1,0,0,0,135,136,5,124,0,0,136,153,5,124,0,0,137,138,5,38,0,0,138,153,5,38,
0,0,139,140,5,61,0,0,140,153,5,61,0,0,141,142,5,33,0,0,142,153,5,61,0,0,
143,144,5,116,0,0,144,145,5,114,0,0,145,146,5,117,0,0,146,153,5,101,0,0,
147,148,5,102,0,0,148,149,5,97,0,0,149,150,5,108,0,0,150,151,5,115,0,0,151,
153,5,101,0,0,152,135,1,0,0,0,152,137,1,0,0,0,152,139,1,0,0,0,152,141,1,
0,0,0,152,143,1,0,0,0,152,147,1,0,0,0,153,42,1,0,0,0,154,155,5,112,0,0,155,
156,5,114,0,0,156,157,5,105,0,0,157,158,5,110,0,0,158,159,5,116,0,0,159,
160,5,102,0,0,160,44,1,0,0,0,161,162,5,118,0,0,162,163,5,111,0,0,163,164,
5,105,0,0,164,165,5,100,0,0,165,166,5,32,0,0,166,167,5,109,0,0,167,168,5,
97,0,0,168,169,5,105,0,0,169,170,5,110,0,0,170,171,5,40,0,0,171,172,5,41,
0,0,172,46,1,0,0,0,173,174,5,34,0,0,174,175,7,1,0,0,175,176,5,34,0,0,176,
48,1,0,0,0,177,179,7,2,0,0,178,177,1,0,0,0,179,180,1,0,0,0,180,178,1,0,0,
0,180,181,1,0,0,0,181,50,1,0,0,0,182,184,7,2,0,0,183,182,1,0,0,0,184,185,
1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,189,7,3,0,0,
188,190,7,2,0,0,189,188,1,0,0,0,190,191,1,0,0,0,191,189,1,0,0,0,191,192,
1,0,0,0,192,52,1,0,0,0,193,195,5,34,0,0,194,196,9,0,0,0,195,194,1,0,0,0,
196,197,1,0,0,0,197,198,1,0,0,0,197,195,1,0,0,0,198,199,1,0,0,0,199,200,
5,34,0,0,200,54,1,0,0,0,201,203,7,4,0,0,202,201,1,0,0,0,203,204,1,0,0,0,
204,202,1,0,0,0,204,205,1,0,0,0,205,56,1,0,0,0,206,208,7,5,0,0,207,206,1,
0,0,0,208,209,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,211,1,0,0,0,211,
212,6,28,0,0,212,58,1,0,0,0,11,0,73,95,133,152,180,185,191,197,204,209,1,
6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CtoMSLexer extends antlr4.Lexer {

    static grammarFileName = "CtoMS.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'\\n'", null, "'('", "')'", "'{'", "'}'", 
                         "'='", null, "'+'", "'-'", "'*'", "'/'", "'%'", 
                         "'\"'", "';'", "'if'", "'else'", "'while'", "'do'", 
                         null, null, "'printf'", "'void main()'" ];
	static symbolicNames = [ null, null, "TYPE", "OPEN_PARENTH", "CLOSE_PARENTH", 
                          "OPEN_CURL", "CLOSE_CURL", "EQUALS", "MATH_EQUALS", 
                          "PLUS", "SUB", "MULT", "DIV", "MOD", "DOUBLE_QUOTE", 
                          "SEMI", "IF_PR", "ELSE_PR", "WHILE_PR", "DO_PR", 
                          "COND_MAT", "COND_LOG", "PRINT", "MAIN", "CHAR", 
                          "INT", "FLOAT", "STRING", "ID", "WS" ];
	static ruleNames = [ "T__0", "TYPE", "OPEN_PARENTH", "CLOSE_PARENTH", "OPEN_CURL", 
                      "CLOSE_CURL", "EQUALS", "MATH_EQUALS", "PLUS", "SUB", 
                      "MULT", "DIV", "MOD", "DOUBLE_QUOTE", "SEMI", "IF_PR", 
                      "ELSE_PR", "WHILE_PR", "DO_PR", "COND_MAT", "COND_LOG", 
                      "PRINT", "MAIN", "CHAR", "INT", "FLOAT", "STRING", 
                      "ID", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CtoMSLexer.EOF = antlr4.Token.EOF;
CtoMSLexer.T__0 = 1;
CtoMSLexer.TYPE = 2;
CtoMSLexer.OPEN_PARENTH = 3;
CtoMSLexer.CLOSE_PARENTH = 4;
CtoMSLexer.OPEN_CURL = 5;
CtoMSLexer.CLOSE_CURL = 6;
CtoMSLexer.EQUALS = 7;
CtoMSLexer.MATH_EQUALS = 8;
CtoMSLexer.PLUS = 9;
CtoMSLexer.SUB = 10;
CtoMSLexer.MULT = 11;
CtoMSLexer.DIV = 12;
CtoMSLexer.MOD = 13;
CtoMSLexer.DOUBLE_QUOTE = 14;
CtoMSLexer.SEMI = 15;
CtoMSLexer.IF_PR = 16;
CtoMSLexer.ELSE_PR = 17;
CtoMSLexer.WHILE_PR = 18;
CtoMSLexer.DO_PR = 19;
CtoMSLexer.COND_MAT = 20;
CtoMSLexer.COND_LOG = 21;
CtoMSLexer.PRINT = 22;
CtoMSLexer.MAIN = 23;
CtoMSLexer.CHAR = 24;
CtoMSLexer.INT = 25;
CtoMSLexer.FLOAT = 26;
CtoMSLexer.STRING = 27;
CtoMSLexer.ID = 28;
CtoMSLexer.WS = 29;



