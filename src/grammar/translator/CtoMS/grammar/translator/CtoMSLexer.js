// Generated from ./grammar/translator/CtoMS.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,29,209,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,3,1,74,8,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,
18,1,18,3,18,122,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,141,8,19,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
22,1,22,1,22,1,22,1,23,4,23,167,8,23,11,23,12,23,168,1,24,4,24,172,8,24,
11,24,12,24,173,1,24,1,24,4,24,178,8,24,11,24,12,24,179,1,25,1,25,4,25,184,
8,25,11,25,12,25,185,1,25,1,25,1,26,1,26,4,26,192,8,26,11,26,12,26,193,3,
26,196,8,26,1,27,4,27,199,8,27,11,27,12,27,200,1,28,4,28,204,8,28,11,28,
12,28,205,1,28,1,28,1,185,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,1,0,8,2,0,60,60,62,62,3,0,32,
32,65,90,97,122,1,0,48,57,1,0,46,46,2,0,65,90,97,122,4,0,48,57,65,90,95,
95,97,122,5,0,43,43,45,45,48,57,65,90,97,122,3,0,9,10,13,13,32,32,225,0,
1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
0,0,0,1,59,1,0,0,0,3,73,1,0,0,0,5,75,1,0,0,0,7,77,1,0,0,0,9,79,1,0,0,0,11,
81,1,0,0,0,13,83,1,0,0,0,15,85,1,0,0,0,17,87,1,0,0,0,19,89,1,0,0,0,21,91,
1,0,0,0,23,93,1,0,0,0,25,95,1,0,0,0,27,97,1,0,0,0,29,99,1,0,0,0,31,102,1,
0,0,0,33,107,1,0,0,0,35,113,1,0,0,0,37,121,1,0,0,0,39,140,1,0,0,0,41,142,
1,0,0,0,43,149,1,0,0,0,45,161,1,0,0,0,47,166,1,0,0,0,49,171,1,0,0,0,51,181,
1,0,0,0,53,189,1,0,0,0,55,198,1,0,0,0,57,203,1,0,0,0,59,60,5,10,0,0,60,2,
1,0,0,0,61,62,5,105,0,0,62,63,5,110,0,0,63,74,5,116,0,0,64,65,5,102,0,0,
65,66,5,108,0,0,66,67,5,111,0,0,67,68,5,97,0,0,68,74,5,116,0,0,69,70,5,99,
0,0,70,71,5,104,0,0,71,72,5,97,0,0,72,74,5,114,0,0,73,61,1,0,0,0,73,64,1,
0,0,0,73,69,1,0,0,0,74,4,1,0,0,0,75,76,5,40,0,0,76,6,1,0,0,0,77,78,5,41,
0,0,78,8,1,0,0,0,79,80,5,123,0,0,80,10,1,0,0,0,81,82,5,125,0,0,82,12,1,0,
0,0,83,84,5,61,0,0,84,14,1,0,0,0,85,86,5,43,0,0,86,16,1,0,0,0,87,88,5,45,
0,0,88,18,1,0,0,0,89,90,5,42,0,0,90,20,1,0,0,0,91,92,5,47,0,0,92,22,1,0,
0,0,93,94,5,37,0,0,94,24,1,0,0,0,95,96,5,34,0,0,96,26,1,0,0,0,97,98,5,59,
0,0,98,28,1,0,0,0,99,100,5,105,0,0,100,101,5,102,0,0,101,30,1,0,0,0,102,
103,5,101,0,0,103,104,5,108,0,0,104,105,5,115,0,0,105,106,5,101,0,0,106,
32,1,0,0,0,107,108,5,119,0,0,108,109,5,104,0,0,109,110,5,105,0,0,110,111,
5,108,0,0,111,112,5,101,0,0,112,34,1,0,0,0,113,114,5,100,0,0,114,115,5,111,
0,0,115,36,1,0,0,0,116,122,7,0,0,0,117,118,5,60,0,0,118,122,5,61,0,0,119,
120,5,62,0,0,120,122,5,61,0,0,121,116,1,0,0,0,121,117,1,0,0,0,121,119,1,
0,0,0,122,38,1,0,0,0,123,124,5,124,0,0,124,141,5,124,0,0,125,126,5,38,0,
0,126,141,5,38,0,0,127,128,5,61,0,0,128,141,5,61,0,0,129,130,5,33,0,0,130,
141,5,61,0,0,131,132,5,116,0,0,132,133,5,114,0,0,133,134,5,117,0,0,134,141,
5,101,0,0,135,136,5,102,0,0,136,137,5,97,0,0,137,138,5,108,0,0,138,139,5,
115,0,0,139,141,5,101,0,0,140,123,1,0,0,0,140,125,1,0,0,0,140,127,1,0,0,
0,140,129,1,0,0,0,140,131,1,0,0,0,140,135,1,0,0,0,141,40,1,0,0,0,142,143,
5,112,0,0,143,144,5,114,0,0,144,145,5,105,0,0,145,146,5,110,0,0,146,147,
5,116,0,0,147,148,5,102,0,0,148,42,1,0,0,0,149,150,5,118,0,0,150,151,5,111,
0,0,151,152,5,105,0,0,152,153,5,100,0,0,153,154,5,32,0,0,154,155,5,109,0,
0,155,156,5,97,0,0,156,157,5,105,0,0,157,158,5,110,0,0,158,159,5,40,0,0,
159,160,5,41,0,0,160,44,1,0,0,0,161,162,5,34,0,0,162,163,7,1,0,0,163,164,
5,34,0,0,164,46,1,0,0,0,165,167,7,2,0,0,166,165,1,0,0,0,167,168,1,0,0,0,
168,166,1,0,0,0,168,169,1,0,0,0,169,48,1,0,0,0,170,172,7,2,0,0,171,170,1,
0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,175,
177,7,3,0,0,176,178,7,2,0,0,177,176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,
0,0,179,180,1,0,0,0,180,50,1,0,0,0,181,183,5,34,0,0,182,184,9,0,0,0,183,
182,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,185,183,1,0,0,0,186,187,1,0,
0,0,187,188,5,34,0,0,188,52,1,0,0,0,189,195,7,4,0,0,190,192,7,5,0,0,191,
190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,196,1,0,
0,0,195,191,1,0,0,0,195,196,1,0,0,0,196,54,1,0,0,0,197,199,7,6,0,0,198,197,
1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,56,1,0,0,0,202,
204,7,7,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,
0,0,206,207,1,0,0,0,207,208,6,28,0,0,208,58,1,0,0,0,12,0,73,121,140,168,
173,179,185,193,195,200,205,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CtoMSLexer extends antlr4.Lexer {

    static grammarFileName = "CtoMS.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'\\n'", null, "'('", "')'", "'{'", "'}'", 
                         "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'\"'", 
                         "';'", "'if'", "'else'", "'while'", "'do'", null, 
                         null, "'printf'", "'void main()'" ];
	static symbolicNames = [ null, null, "TYPE", "OPEN_PARENTH", "CLOSE_PARENTH", 
                          "OPEN_CURL", "CLOSE_CURL", "EQUALS", "PLUS", "SUB", 
                          "MULT", "DIV", "MOD", "DOUBLE_QUOTE", "SEMI", 
                          "IF_PR", "ELSE_PR", "WHILE_PR", "DO_PR", "COND_MAT", 
                          "COND_LOG", "PRINT", "MAIN", "CHAR", "INT", "FLOAT", 
                          "STRING", "ID", "INV_ID", "WS" ];
	static ruleNames = [ "T__0", "TYPE", "OPEN_PARENTH", "CLOSE_PARENTH", "OPEN_CURL", 
                      "CLOSE_CURL", "EQUALS", "PLUS", "SUB", "MULT", "DIV", 
                      "MOD", "DOUBLE_QUOTE", "SEMI", "IF_PR", "ELSE_PR", 
                      "WHILE_PR", "DO_PR", "COND_MAT", "COND_LOG", "PRINT", 
                      "MAIN", "CHAR", "INT", "FLOAT", "STRING", "ID", "INV_ID", 
                      "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CtoMSLexer.EOF = antlr4.Token.EOF;
CtoMSLexer.T__0 = 1;
CtoMSLexer.TYPE = 2;
CtoMSLexer.OPEN_PARENTH = 3;
CtoMSLexer.CLOSE_PARENTH = 4;
CtoMSLexer.OPEN_CURL = 5;
CtoMSLexer.CLOSE_CURL = 6;
CtoMSLexer.EQUALS = 7;
CtoMSLexer.PLUS = 8;
CtoMSLexer.SUB = 9;
CtoMSLexer.MULT = 10;
CtoMSLexer.DIV = 11;
CtoMSLexer.MOD = 12;
CtoMSLexer.DOUBLE_QUOTE = 13;
CtoMSLexer.SEMI = 14;
CtoMSLexer.IF_PR = 15;
CtoMSLexer.ELSE_PR = 16;
CtoMSLexer.WHILE_PR = 17;
CtoMSLexer.DO_PR = 18;
CtoMSLexer.COND_MAT = 19;
CtoMSLexer.COND_LOG = 20;
CtoMSLexer.PRINT = 21;
CtoMSLexer.MAIN = 22;
CtoMSLexer.CHAR = 23;
CtoMSLexer.INT = 24;
CtoMSLexer.FLOAT = 25;
CtoMSLexer.STRING = 26;
CtoMSLexer.ID = 27;
CtoMSLexer.INV_ID = 28;
CtoMSLexer.WS = 29;



