// Generated from ./grammar/translator/CtoMS.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,26,192,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,68,8,1,1,2,1,2,1,3,1,3,1,
4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,3,15,
105,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,3,16,124,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
19,1,20,4,20,150,8,20,11,20,12,20,151,1,21,4,21,155,8,21,11,21,12,21,156,
1,21,1,21,4,21,161,8,21,11,21,12,21,162,1,22,1,22,4,22,167,8,22,11,22,12,
22,168,1,22,1,22,1,23,1,23,4,23,175,8,23,11,23,12,23,176,3,23,179,8,23,1,
24,4,24,182,8,24,11,24,12,24,183,1,25,4,25,187,8,25,11,25,12,25,188,1,25,
1,25,1,168,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
49,25,51,26,1,0,8,2,0,60,60,62,62,3,0,32,32,65,90,97,122,1,0,48,57,1,0,46,
46,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,5,0,43,43,45,45,48,57,65,
90,97,122,3,0,9,10,13,13,32,32,208,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
0,0,0,1,53,1,0,0,0,3,67,1,0,0,0,5,69,1,0,0,0,7,71,1,0,0,0,9,73,1,0,0,0,11,
75,1,0,0,0,13,77,1,0,0,0,15,79,1,0,0,0,17,81,1,0,0,0,19,83,1,0,0,0,21,85,
1,0,0,0,23,87,1,0,0,0,25,89,1,0,0,0,27,91,1,0,0,0,29,94,1,0,0,0,31,104,1,
0,0,0,33,123,1,0,0,0,35,125,1,0,0,0,37,132,1,0,0,0,39,144,1,0,0,0,41,149,
1,0,0,0,43,154,1,0,0,0,45,164,1,0,0,0,47,172,1,0,0,0,49,181,1,0,0,0,51,186,
1,0,0,0,53,54,5,10,0,0,54,2,1,0,0,0,55,56,5,105,0,0,56,57,5,110,0,0,57,68,
5,116,0,0,58,59,5,102,0,0,59,60,5,108,0,0,60,61,5,111,0,0,61,62,5,97,0,0,
62,68,5,116,0,0,63,64,5,99,0,0,64,65,5,104,0,0,65,66,5,97,0,0,66,68,5,114,
0,0,67,55,1,0,0,0,67,58,1,0,0,0,67,63,1,0,0,0,68,4,1,0,0,0,69,70,5,40,0,
0,70,6,1,0,0,0,71,72,5,41,0,0,72,8,1,0,0,0,73,74,5,123,0,0,74,10,1,0,0,0,
75,76,5,125,0,0,76,12,1,0,0,0,77,78,5,61,0,0,78,14,1,0,0,0,79,80,5,43,0,
0,80,16,1,0,0,0,81,82,5,45,0,0,82,18,1,0,0,0,83,84,5,42,0,0,84,20,1,0,0,
0,85,86,5,47,0,0,86,22,1,0,0,0,87,88,5,34,0,0,88,24,1,0,0,0,89,90,5,59,0,
0,90,26,1,0,0,0,91,92,5,105,0,0,92,93,5,102,0,0,93,28,1,0,0,0,94,95,5,101,
0,0,95,96,5,108,0,0,96,97,5,115,0,0,97,98,5,101,0,0,98,30,1,0,0,0,99,105,
7,0,0,0,100,101,5,60,0,0,101,105,5,61,0,0,102,103,5,62,0,0,103,105,5,61,
0,0,104,99,1,0,0,0,104,100,1,0,0,0,104,102,1,0,0,0,105,32,1,0,0,0,106,107,
5,124,0,0,107,124,5,124,0,0,108,109,5,38,0,0,109,124,5,38,0,0,110,111,5,
61,0,0,111,124,5,61,0,0,112,113,5,33,0,0,113,124,5,61,0,0,114,115,5,116,
0,0,115,116,5,114,0,0,116,117,5,117,0,0,117,124,5,101,0,0,118,119,5,102,
0,0,119,120,5,97,0,0,120,121,5,108,0,0,121,122,5,115,0,0,122,124,5,101,0,
0,123,106,1,0,0,0,123,108,1,0,0,0,123,110,1,0,0,0,123,112,1,0,0,0,123,114,
1,0,0,0,123,118,1,0,0,0,124,34,1,0,0,0,125,126,5,112,0,0,126,127,5,114,0,
0,127,128,5,105,0,0,128,129,5,110,0,0,129,130,5,116,0,0,130,131,5,102,0,
0,131,36,1,0,0,0,132,133,5,118,0,0,133,134,5,111,0,0,134,135,5,105,0,0,135,
136,5,100,0,0,136,137,5,32,0,0,137,138,5,109,0,0,138,139,5,97,0,0,139,140,
5,105,0,0,140,141,5,110,0,0,141,142,5,40,0,0,142,143,5,41,0,0,143,38,1,0,
0,0,144,145,5,34,0,0,145,146,7,1,0,0,146,147,5,34,0,0,147,40,1,0,0,0,148,
150,7,2,0,0,149,148,1,0,0,0,150,151,1,0,0,0,151,149,1,0,0,0,151,152,1,0,
0,0,152,42,1,0,0,0,153,155,7,2,0,0,154,153,1,0,0,0,155,156,1,0,0,0,156,154,
1,0,0,0,156,157,1,0,0,0,157,158,1,0,0,0,158,160,7,3,0,0,159,161,7,2,0,0,
160,159,1,0,0,0,161,162,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,44,1,
0,0,0,164,166,5,34,0,0,165,167,9,0,0,0,166,165,1,0,0,0,167,168,1,0,0,0,168,
169,1,0,0,0,168,166,1,0,0,0,169,170,1,0,0,0,170,171,5,34,0,0,171,46,1,0,
0,0,172,178,7,4,0,0,173,175,7,5,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,
174,1,0,0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,174,1,0,0,0,178,179,1,0,
0,0,179,48,1,0,0,0,180,182,7,6,0,0,181,180,1,0,0,0,182,183,1,0,0,0,183,181,
1,0,0,0,183,184,1,0,0,0,184,50,1,0,0,0,185,187,7,7,0,0,186,185,1,0,0,0,187,
188,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,0,190,191,6,25,
0,0,191,52,1,0,0,0,12,0,67,104,123,151,156,162,168,176,178,183,188,1,6,0,
0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CtoMSLexer extends antlr4.Lexer {

    static grammarFileName = "CtoMS.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'\\n'", null, "'('", "')'", "'{'", "'}'", 
                         "'='", "'+'", "'-'", "'*'", "'/'", "'\"'", "';'", 
                         "'if'", "'else'", null, null, "'printf'", "'void main()'" ];
	static symbolicNames = [ null, null, "TYPE", "OPEN_PARENTH", "CLOSE_PARENTH", 
                          "OPEN_CURL", "CLOSE_CURL", "EQUALS", "PLUS", "MINUS", 
                          "MULT", "DIV", "DOUBLE_QUOTE", "SEMI", "IF_PR", 
                          "ELSE_PR", "COND_MAT", "COND_LOG", "PRINT", "MAIN", 
                          "CHAR", "INT", "FLOAT", "STRING", "ID", "INV_ID", 
                          "WS" ];
	static ruleNames = [ "T__0", "TYPE", "OPEN_PARENTH", "CLOSE_PARENTH", "OPEN_CURL", 
                      "CLOSE_CURL", "EQUALS", "PLUS", "MINUS", "MULT", "DIV", 
                      "DOUBLE_QUOTE", "SEMI", "IF_PR", "ELSE_PR", "COND_MAT", 
                      "COND_LOG", "PRINT", "MAIN", "CHAR", "INT", "FLOAT", 
                      "STRING", "ID", "INV_ID", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CtoMSLexer.EOF = antlr4.Token.EOF;
CtoMSLexer.T__0 = 1;
CtoMSLexer.TYPE = 2;
CtoMSLexer.OPEN_PARENTH = 3;
CtoMSLexer.CLOSE_PARENTH = 4;
CtoMSLexer.OPEN_CURL = 5;
CtoMSLexer.CLOSE_CURL = 6;
CtoMSLexer.EQUALS = 7;
CtoMSLexer.PLUS = 8;
CtoMSLexer.MINUS = 9;
CtoMSLexer.MULT = 10;
CtoMSLexer.DIV = 11;
CtoMSLexer.DOUBLE_QUOTE = 12;
CtoMSLexer.SEMI = 13;
CtoMSLexer.IF_PR = 14;
CtoMSLexer.ELSE_PR = 15;
CtoMSLexer.COND_MAT = 16;
CtoMSLexer.COND_LOG = 17;
CtoMSLexer.PRINT = 18;
CtoMSLexer.MAIN = 19;
CtoMSLexer.CHAR = 20;
CtoMSLexer.INT = 21;
CtoMSLexer.FLOAT = 22;
CtoMSLexer.STRING = 23;
CtoMSLexer.ID = 24;
CtoMSLexer.INV_ID = 25;
CtoMSLexer.WS = 26;



